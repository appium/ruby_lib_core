module Appium
  Location: Class

  module Core
    module Android
    end

    module Ios
    end

    class Options
      @custom_url: String

      @default_wait: Integer

      @enable_idempotency_header: bool

      @direct_connect: bool

      @port: Integer

      @wait_timeout: Integer

      @wait_interval: Integer

      @listener: Selenium::WebDriver::Support::AbstractEventListener

      attr_reader custom_url: String

      attr_reader default_wait: Integer

      attr_reader port: Integer

      attr_reader wait_timeout: Integer

      attr_reader wait_interval: Integer

      attr_reader listener: Selenium::WebDriver::Support::AbstractEventListener

      attr_reader direct_connect: bool

      attr_reader enable_idempotency_header: bool

      def initialize: (Hash[Symbol, String] appium_lib_opts) -> void

      private

      def default_tmp_appium_lib_session: () -> String
    end

    class DirectConnections
      @protocol: String

      @host: String

      @port: String

      @path: String

      KEYS: Hash[String | Symbol, String]

      W3C_KEYS: Hash[String | Symbol, String]

      attr_reader protocol: String

      attr_reader host: String

      attr_reader port: String

      attr_reader path: String

      def initialize: (Hash[String | Symbol, String] capabilities) -> void
    end

    class Driver
      @delegate_target: self

      @automation_name: Symbol

      @custom_url: String

      @caps: Hash[Symbol | String, Symbol | String | Integer]

      @http_client: Core::Base::Http::Default

      @driver: Core::Base::Driver

      @device: Symbol | String

      @enable_idempotency_header: bool

      @default_wait: Integer

      @port: Integer

      @wait_timeout: Integer

      @wait_interval: Integer

      @listener: Selenium::WebDriver::Support::AbstractEventListener

      @direct_connect: bool

      include Waitable

      attr_reader caps: Base::Capabilities

      attr_reader http_client: Base::Http::Default

      attr_reader enable_idempotency_header: bool

      attr_reader device: Symbol

      attr_reader automation_name: Symbol

      attr_reader custom_url: String

      attr_reader default_wait: Integer

      attr_reader port: Integer

      DEFAULT_APPIUM_PORT: Integer

      attr_reader wait_timeout: Integer

      attr_reader wait_interval: Integer

      attr_reader listener: Selenium::WebDriver::Support::AbstractEventListener

      attr_reader driver: Core::Base::Driver

      attr_reader direct_connect: bool

      def self.for: (Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric] opts) -> Driver

      def self.attach_to: (
          String session_id,
          ?url: String?,
          ?automation_name: Symbol,
          ?platform_name: String?,
          ?http_client_ops:
          Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric]
        ) -> Selenium::WebDriver

      private

      def delegated_target_for_test: () -> self

      def initialize: () -> void

      public

      def setup_for_new_session: (?Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric] opts) -> self

      def start_driver: (?server_url: untyped?, ?http_client_ops: ::Hash[untyped, untyped]) -> untyped

      def attach_to: (untyped session_id, ?url: untyped?, ?automation_name: Symbol, ?platform_name: untyped?, ?http_client_ops: Hash[untyped, untyped]) -> untyped

      def get_http_client: (?http_client: untyped?, ?open_timeout: untyped?, ?read_timeout: untyped?) -> untyped

      def set_implicit_wait_by_default: (untyped wait) -> untyped

      def quit_driver: () -> void

      def appium_server_version: () -> Hash[String, String]

      private

      def convert_to_symbol: (untyped? value) -> Symbol

      def extend_for: (device: Symbol | String, automation_name: Symbol) -> self

      extend Core

      extend Core::Device

      def get_caps: (Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric]? opts)
        -> Core::Base::Capabilities

      def get_appium_lib_opts: (Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric]? opts)
        -> (Symbol | String | Hash[Symbol, String | Numeric] | Numeric)

      def get_app: () -> String?

      def set_app_path: () -> String?

      def set_appium_lib_specific_values: (
          Hash[Symbol, Symbol | String | Hash[Symbol, String | Numeric] | Numeric]? appium_lib_opts
        ) -> self

      def set_appium_device: () -> String

      def set_automation_name: () -> Symbol?

      def convert_downcase: (Symbol value) -> Symbol
    end
  end
end
